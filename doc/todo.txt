5/16/2023
* Vulkan boilerplate = step 1
* * Initializing just like... the window to support vulkan
* * Setting up the debug stuff
* * Getting the Devices
* * * Seeing if it supports compute
* * * Seeing if it supports any other extensions
* * Setting Up the Swap/FrameBuffers
* * Setting Up the Queues
* * * Compute/Graphics/Transfer?

* Lets see if you can just create a device right now


5/15/2023
* Rendering Okay so yeah you want to start seeing stuff
* question is: do you want to throw in your renderer or build from bottom up
* So what do you need to do:
* 1. DataFlow to all the ShaderStructures
* 2. DataFlow for initial vulkan setup
* 3. Vulkan boilerplate/setup
* 4. Vulkan Start/Stop Render
* 5. Dataflow for Uniform Buffer updates
* 6. Vulkan Screen resizing 

5/11/2023
* I think the most important thing you can do right now is...
* * Get to a point where you can see things
* * anything
* * And then be able to move things
* * anything
* So right now you have a scene
* You need a BVH
* Then render
* You'll just have to use your own right now 
* Then try embree later


5/10/23 what do?
* Test out the transform for:
* * static_transform
* * Dynamic_Transform
* * * OnAdd/OnSet/OnUpdate
* 


https://github.com/SanderMertens/flecs/tree/master/examples/cpp

TODO:
* Transform System
* * For the static transform system, you want it to update only OnSet
* * For the dynamic transform system, you want it to update always
* * For both you want to use the Querybuilder and cascade system iter thing but...
* * * its like... you want both to be built the same so err thang laid out flat in memory but
* * * its like... you want the algo to happen per event... actually maybe... hmmm



* Physics System
* * Perfect place to test the transform system!




What do you want?
* Better Scene/Graph Management
* Better ECS
* Better BVH
* Better Multithreading
* I wanna know how to graphix
* shadows
* Better Game Scene Systeming
* Better Logging
* Better CMAKING/Build systeming
* Better SYS/CMP management
* Create a visual structure from the beginning
* Better Game/Frame Systeming
* Better UI/layering
* Better Organization
* Better Rendering system
* Serialization
* Prefabs

What are some From-The-Ground-Up archetectural changes?
* CMAKE - beginning
* SYS/CMP - beginning 
* Visual Structure - yeah we need dis
* Flecs fixes
* INPUT something that scales for anything (game and engine) easily
* LIBS so you can make tools easier
* * if lib then how do?
* * also it could help with like other ish
* Rendering - you kinda already have something tho?


What can flecs replace?
*Scene
*Serizliation
*node
*Frame
*prefab?

* Learning Path:


Goals for libs:
Renderer.Lib
Scene.Lib
 ^^ super useful 
 ^^ for like level generators for example
Core.lib
 ^^ to handle the dependencies
 