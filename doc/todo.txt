7/12/2023
* Soooo back to the drawing board as it relates to the renderer....
* There's some important things to think about and consider with errthang
1. What part of the renderer do you want public?
2. How should the data be separated?

1.... So there's actually a couple things to consider...
... so lets think about the logger, you want to at any time be able to do something like...
log::this_thing
so you want to be able to do something like...
Rendering::Compute::Raytracer::add_entity(froku);


7/11/2023
* So for this, yourre just going to copy everything you did with the render base which is...
* * Have a pointer to the component
* * Have a class.... idea...
* * have a "StartUp" namespace
* * What ifffff... you still have a renderer and inheritace etc... that takes the render base etc...
* * But none of the member variables of the renderer
* * So the renderer is jsut a collection of functions



7/5/2023
* Soooo you realized that you're entire renderer is not ECSIFIED and the question is do you wanna or nah?
* * its too complex
* * but... if you want it to be pure... 
* * I have no clue how i could even begin to do such a thing....
7/6/2023
* * its been so long that you've used flecs so i think its best to just...
* * * Render everything as-is right now
* * * Once it's complete, THEN restructure 
* * * ooo but how about... all the arrays get statically externalized
* * * Naming convention: Class = lower_case, members = lower_case. Instantiations = Upper case

7/1/2023
* wow... you did a lot of writing for absolutely nothign that day like name changes??? ugh why
* Soooo with the name changes... 
* * Caps Namespaces = yes = done
* * lowercase functions = yes = doing
* * I like Capitalized Variables But.... That Might Be Too Much... and also... its like i only like them... sometimess...
* * Like I dont want to do Mouse.X i prever Mouse.x mouse.x 

mouse.x Mouse.X mouse.x Mouse.X Mouse.x 

6/28/2023
* wow its been a long time lol and look i ts like 1 month 1 day exactly
* was looking at this again:
Goals for libs:
Renderer.Lib
Scene.Lib
 ^^ super useful 
 ^^ for like level generators for example
Core.lib
 ^^ to handle the dependencies

 do I still want to do this?!??
 is there really a point in Core.lib?
 Also what about dependencies
 like between renderer and scene 
 a renderer needs a scene.lib  
 maybe just figuring out  all the inputs and outputs of the renderer
 and all the inputs and outputs of the scene
 and all the inputs and o utputus of the core
 idk what im talking about rn tbh
 oneo of the important inputs of the renderer is the BVH
 the bvh is connected to the scene 
 it also depends on the type of rendnerer
 are you really gonna have multiple types like for computeu vs regular raytracer
 are you gonna learn regular vulkan raytracing
 my brain doesn'tn f eel charged rnWHERES MY COFFFEE IS IT STILL AL LTHE WAY OVER HTERE
  OOPS

  hmmmm
  maybe the BVH should be part of renderer instead of scene
  may sound counter intutive but... its only used for renderingand if you take
  a different path then it willb e gpu bound anyways

  DO YOU WANT TO CONTINUE WITH THIS?!?!? 
  yes/no what are the benefits etc//??? also how closoe are we
  once we get the raytracer up we can view t hings
  benefits are .... YES DO IT leggo
  sooo the api you want for the renderer is something like this...
  Axiom::renderer::init()
  Axiom::renderer::destroy()
  Axiom::renderer::AddMaterial();
  also the more i think about grammar... the more i feel like it shoudlb e the opposite
  Axiom::Renderer::add_material()
  All nouns should be capitalized
  All actions should be lowercase
  why is everything so backwards
  Filenames should probably be caps too
  why is programming so fing backwards?!?!?
  why is it so hard to just make things like english
  like wtf is up with stoff like... iPhone or iNet or whatever
  just be normal????
  hmmmm
  maybe do a massive rewrite while its small and rewriteable

  Namespaces = caps... i mean just look at what its called NAMEspace... NAME = CAPITAL
  Structs/Classes = lowercase
  variables = caps

  Axiom::Log::init()
  Axiom::Log::init();
  Axiom::Log::logger TheLogger;
  Axiom::Renderer::compute-raytracer TheRaytracer = new compute-raytracer();
  Axiom::Log-component TheLogger = new Axiom::Log-cmp
  Axiom::cmp-timer 
  Axiom::Timer-cmp 

  both are  ugly

  Cmp_Timer looks the best way better than cmp-timer or timer-cmp or timer-component
  but is that a bias?
  timer-component Tc = new timer-component()
  UGH this is so hard to get used to

  ~_~ ~_~ ~~__~~        ~~~___~~~   V___V    VV__VV VVvVVVVvVvVvVVVVVvvvvVVVVVV

  also it starts the thing off bad so like when you assign a variable its blah

  Cmp_Timer CT 
  however...
  auto CT = new cmp-timer(); is okayish
  so yeah you already start with lower cases 
  cmp-timer CT = new cmp-timer()
  theres no way to distinguish functions from classes
  functions = always 2 or more words 
   okay final discussion is... what should the api look like for components
   should everything be like Axiom::cmp-timer or.... Axiom::Timer::cmp-timer
   and then for the systems... do you want something like Axiom::TimerSystem::initialize() Axiom::RenderSystem::add_material(Mat)
   Axiom::WindowSystem::initialize_window();
   Axiom::LogSystem::initialize_logging();
   
   Axiom::SceneSystem::load_scene(1);
   Axiom::cmp-scene TheScene = new Axiom::cmp-scene(1);
   Axiom::scene-cmp TheScene = new Axiom::scene-cmp(1);

   cmp after word will also be consistent with how you're doing systems

   Axiom::scene-component TheScene = new Axiom::scene-component(1);
   
   Axiom::SceneSystem::goto_scene(2);

  namespace systems s hould say system in it
  Axiom::LogSystem::Init();
  Axiom::RenderSystem::Init();

  also screw people who say no comments i say comments everywhere!!!!!!
  I like encapsulation though but like... what about just like a private namespace?
  like let people have the ability to massively screw things up but give them teh freedom to see  anyways

    okay so this is establed:
    1. Namespaces = caps
    2. Functions = lower_case
    3. Systems = NamespaceSystem

    maybe establised
    1. classes = lower-cas
    2. components = class-componentt

    okay this is what it will finally look like with these rules
    Axiom::SceneSystem::initialize();
    Axiom::scene-component SC = new Axiom::scene-component(1);
    Axiom::SceneSystem::goto_scene(sc);
    auto SecondScene = new Axiom::scene-component(2);
    Axiom::SceneSystem::switch_scene_to(SecondScene);

    K now what about EnUMS?

    sooo you can't do class-component lol
    maybe just do class_component
5/27/2023
* just do vulkan first, then ecsify it later
* okay design your api:


Axiom::renderer::init();
g_world.add<Axiom::Cmp_Vulkan, Axiom::Cmp_ComputeRaytracer>();

auto* cmp_crt = g_world.get_mut<Cmp_ComputeRaytracer>()
cmp_crt->do_stuff();


froku->add<Cmp_Render, Cmp_Primitive>

For the renderer there will be observers for:
    * OnAdd<Cmp_Render>
    * OnRemove<Cmp_Render>
    * OnAdd<Cmp_ComputeRaytracer>()
    * OnRemove<Cmp_ComputeRaytracer>()
    * OnAdd<Cmp_RenderFrame>() //framestart
    * OnRemvoe<Cmp_RenderFrame>() //frameend
System for update<Cmp_Render>

you can figure dat ish out later now question is... how do we get to Axiom::renderer::init()?
renderer::init()
InitAllTheThings
Base::Init()

Question::Do you want to use Inheretance?
Just create a rendererobject
renderer::init()
new raytracer ???
no renderer::init sets all teh functions
when you add the raytracer component and the vulkcan component you create everything
remember::renderer is just a namespace with a bunch of functions
you can hide all functions in the base but its a lot of typing and also you'd need to pass in vulkan to every function


5/22/2023
* Vulkan boilerplate what to include?
* * more important.... shoudl everything be done in the same file?

 

5/17/2023
* Yesterday I came to realize that vulkan will always be messy
* * so just bare with it and muscle through
* * If your previous vulkan ish aint broke then dont fix it
* * There's no good way to make it super clean feeling
* However, the things you mentioned in 5/15 should be clean
* * you should encapsulate a lot of the disgustinig boilerplate
* * but keep public, your ability to manipulate those 6
* * and also debugging can be added to the list

 

* public: 
* 1. Shaders
* 2. Pipelines
* 3. FrameBuffers/Resize
* 4. Draw
* 5. debug
* 6. Buffers

 

* Question is: should there be a large public component that handles all vulkan
* or have like... just small component and a singleton that handles all the backend

 

* Better question is... is this slowing you down too much???
* is it okay to be slowed down? this is some foundational stuff...
* i mean it sucks... but once you get through this hurdle it'll be GOLDEN
* Okay so right now you have a vulkan device struct that has all the devices 
* * its a huge class that does many things
* * should i make it a component?
* * is that even possible?
* so yeah what you can do is... make the device a component,
* * and make those functions get the cmp
* but why? outside of the logical device...
* * maybe the queue, callback and commandpool... is anything else used that much?
* * only the logical device is used a lot, physical once, qfams a few
* yo real talk, there's legit no reason do to everything again i think a lot of yo ish is already clean
* and the messy ish.... can't help but be messy... its Vulkan just get yo ish up n runnin  usin volk
* question is though.... how to ECSify some of it, but i think that
* * the only way is to make a Cmp for vulkan and pass it in everywhere

 

* How about have:
* 1. vulkan-boilerplate-component
* * a. This handles everything thats like... only used once for initiization etc..
* 2. vulkan-common-component
* * a. This is for anything that might be used frequently across systems
* 3. compute-raytracer-component
* * a. This is making me question 2a tbh


5/16/2023
* Vulkan boilerplate = step 1
* * Initializing just like... the window to support vulkan
* * Setting up the debug stuff
* * Getting the Devices
* * * Seeing if it supports compute
* * * Seeing if it supports any other extensions
* * Setting Up the Swap/FrameBuffers
* * Setting Up the Queues
* * * Compute/Graphics/Transfer?

* Lets see if you can just create a device right now


5/15/2023
* Rendering Okay so yeah you want to start seeing stuff
* question is: do you want to throw in your renderer or build from bottom up
* So what do you need to do:
* 1. DataFlow to all the ShaderStructures
* 2. DataFlow for initial vulkan setup
* 3. Vulkan boilerplate/setup
* 4. Vulkan Start/Stop Render
* 5. Dataflow for Uniform Buffer updates
* 6. Vulkan Screen resizing 

5/11/2023
* I think the most important thing you can do right now is...
* * Get to a point where you can see things
* * anything
* * And then be able to move things
* * anything
* So right now you have a scene
* You need a BVH
* Then render
* You'll just have to use your own right now 
* Then try embree later


5/10/23 what do?
* Test out the transform for:
* * static_transform
* * transform_dynamic_entity
* * * OnAdd/OnSet/OnUpdate
* 


https://github.com/SanderMertens/flecs/tree/master/examples/cpp

TODO:
* Transform System
* * For the static transform system, you want it to update only OnSet
* * For the dynamic transform system, you want it to update always
* * For both you want to use the Querybuilder and cascade system iter thing but...
* * * its like... you want both to be built the same so err thang laid out flat in memory but
* * * its like... you want the algo to happen per event... actually maybe... hmmm



* Physics System
* * Perfect place to test the transform system!




What do you want?
* Better Scene/Graph Management
* Better ECS
* Better BVH
* Better Multithreading
* I wanna know how to graphix
* shadows
* Better Game Scene Systeming
* Better Logging
* Better CMAKING/Build systeming
* Better SYS/CMP management
* Create a visual structure from the beginning
* Better Game/Frame Systeming
* Better UI/layering
* Better Organization
* Better Rendering system
* Serialization
* Prefabs

What are some From-The-Ground-Up archetectural changes?
* CMAKE - beginning
* SYS/CMP - beginning 
* Visual Structure - yeah we need dis
* Flecs fixes
* INPUT something that scales for anything (game and engine) easily
* LIBS so you can make tools easier
* * if lib then how do?
* * also it could help with like other ish
* Rendering - you kinda already have something tho?


What can flecs replace?
*Scene
*Serizliation
*node
*Frame
*prefab?

* Learning Path:


Goals for libs:
Renderer.Lib
Scene.Lib
 ^^ super useful 
 ^^ for like level generators for example
Core.lib
 ^^ to handle the dependencies
 